<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>
 # Python script
# A* algorithm for waveguide path generation

"""
This file is part of the SiEPIC_EBeam_PDK
by Jaspreet Jhoja (c) 2015

This Python file takes an input for start and end point coordinates and generates an optimal path without crossing or overlapping the existing waveguides.

uses:
 - the SiEPIC EBeam GDS Library
 - the SiEPIC EBeam PCell Library

Version history:

Jaspreet Jhoja 		2015/12/24 - 2015/12/29
- Optimised for designs with multiple waveguides.
- Applied optimisation filter to remove overlapping path points.

Jaspreet Jhoja 		2015/12/13
- Does not use any external libraries

Jaspreet Jhoja          2015/12/9- 2015/12/11
- Uses visible graph to navigate through the mesh.
- Improved speed and solution time.

Jaspreet Jhoja          2015/12/03
 - Takes Manual coordinate input, if no coordinates are set,
    then the script automatically extract coordinates from the 
     start_pt and end_pt text.      
 - Allow input for desired gap between waveguides
 - only works for waveguide width of 500nm 
 -  usually takes 10-15 seconds, depending on the complexity of the obstacle
 
"""

# 
# Python script to create a layout for testing a double-bus ring resonator.
# uses:
#  - the SiEPIC EBeam GDS Library
#  - the SiEPIC EBeam PCell Library
# deletes everything first
#be patient, usually it takes around 14-15 seconds depending on the complexity of the obstacles

from collections import deque
import pya
import sys, ast, copy, operator, heapq, time, string, collections
from math import sqrt
from collections import deque
global opened, closed, child_nodes, listtoget, barred_points, gap, restricted_points


opened = [] # stores all the generated but yet to visit nodes
closed = [] #stores all the visited nodes
child_nodes = [] # stores all the child nodes
barred_points = [] #points on 1d lines which are already taken
starting_pt=[0, 0]  #starting X and Y coordinates
goal_pt = [0,0]  #Goal C and Y coordinates
gap = 1000 #desired gap between waveguides. Default: 0.5um
wg_points = [] #list containing all the final backtracked path points



def find_points(topcell, LayerTextN):
  t = []
  dbu = topcell.layout().dbu
  iter = topcell.begin_shapes_rec(LayerTextN)
  i=0
  while not(iter.at_end()):
    if iter.shape().is_text():
      text = iter.shape().text
      if text.string.find("start_pt") > -1:
        i+=1
        text2 = iter.shape().text.transformed(iter.itrans())
        t.append([text2.x, text2.y])
      if text.string.find("end_pt") > -1:
        i+=1
        text2 = iter.shape().text.transformed(iter.itrans())
        t.append([text2.x, text2.y])
    iter.next()

  return t

if(starting_pt == goal_pt):
  topcell = pya.Application.instance().main_window().current_view().active_cellview().cell
  LayerTextN = topcell.layout().layer(LayerText)
  t = find_points(topcell, LayerTextN)
  starting_pt = t[1]
  goal_pt = t[0]



# Configure variables to draw structures in the presently selected cell:
lv = pya.Application.instance().main_window().current_view()
if lv == None:
  raise Exception("No view selected")
# Find the currently selected layout.
layout = pya.Application.instance().main_window().current_view().active_cellview().layout() 
if layout == None:
  raise Exception("No layout")
cv = pya.Application.instance().main_window().current_view().active_cellview()
# find the currently selected cell:

if topcell == None:
  raise Exception("No cell")
# fetch the database parameters
dbu = layout.dbu

# Define layers based on PDK_functions:
LayerSiN = layout.layer(LayerSi)
LayerTextN = layout.layer(LayerText)
LayerPinRecN = layout.layer(LayerPinRec)
LayerDevRecN = layout.layer(LayerDevRec)
LayerFbrTgtN = layout.layer(LayerFbrTgt)
LayerErrorN = layout.layer(LayerError)
LayerINTERCONNECTN = layout.layer(LayerINTERCONNECT)
LayerSi = pya.LayerInfo(1, 0)
#LayerSiN = cell.layout().layer(LayerSi)
fpLayer = pya.LayerInfo(99, 0)
#fpLayerN = cell.layout().layer(fpLayer)
TextLayer = pya.LayerInfo(10, 0)
#TextLayerN = cell.layout().layer(TextLayer)

# Clear the previous errors:
clear_ErrorLayer(topcell, LayerErrorN)


############################################################################
####  PHASE -1 : Extract points which are already taken ####################
############################################################################

# initialize the arrays to keep track of layout objects
reset_Optical_classes()
optical_components = []
optical_waveguides = []
optical_pins = []
optical_nets = []

# Create a Results Database
rdb_i = lv.create_rdb("SiEPIC_Verification")
rdb = lv.rdb(rdb_i)
rdb.top_cell_name = topcell.name
rdb_cell = rdb.create_cell(topcell.name)

# Search the layout for the components and waveguides:
# Search the arrays to identify all the nets:
optical_waveguides, optical_components, clock_find_all_components, clock_find_all_waveguides, clock_identify_all_nets \
  = netlist_extraction(topcell)

b_points = []  #list containing extracted waveguide points and their widths
for i in optical_waveguides:
  converted_points = i.points
  b_points.append([i.wg_width*1e3,converted_points])

bar_points = []

for i in b_points:
  a = []
  for j in i[1]:
    a.append([round(float(j[0]*1e-3),2), round(float(j[1]*1e-3),2)])
  bar_points.append(a)
  
temp_points = bar_points
width = 0.5
barred_points = [] #list used to store obstacle points which will get used to generate polygons
shell = []# points that will actually get used
shell_pt=[]
add = 3

#The following loop generates vertices to be used in sparse graph
for l in temp_points:
    a= l
    m=[]
    n = []
    for i in range(0,len(a),1):
        if(i>0):
            if(a[i][0]==a[i-1][0]):
                if((a[i-1][1]-a[i][1])>0):#08 00
                    p =[a[i][0],a[i][1]-add]
                    q =[a[i-1][0],a[i-1][1]+add]
                elif((a[i-1][1]-a[i][1])<0):
                    p =[a[i][0],a[i][1]+add]
                    q =[a[i-1][0],a[i-1][1]-add]
                if(len(m)>=1):
                    p[0] = m[i-1][0]
                    q[0] = m[i-1][0]
            elif(a[i][1] == a[i-1][1]):
                if((a[i][0]-a[i-1][0])>0):#00 90
                    p =[a[i][0]+add,a[i][1]]
                    q =[a[i-1][0]-add,a[i-1][1]]
                elif((a[i][0]-a[i-1][0])<0):
                    p =[a[i][0]-add,a[i][1]]
                    q =[a[i-1][0]+add,a[i-1][1]]
                if(len(m)>=1):
                    p[1] = m[i-1][1]
                    q[1] = m[i-1][1]                    
            if(a[i-1] not in n):
                m.append(q)
                n.append(a[i-1])
            if(a[i] not in n):
                m.append(p)
                n.append(a[i])
    shell.append(m)

########### FUNCTION for CHECKING IF A POINT INTERSECTS ###############
    
class Point:
	def __init__(self,x,y):
		self.x = x
		self.y = y

def ccw(A,B,C):
	return (C.y-A.y)*(B.x-A.x) > (B.y-A.y)*(C.x-A.x)

def intersect(A,B,C,D):
	return ccw(A,C,D) != ccw(B,C,D) and ccw(A,B,C) != ccw(A,B,D)	
	
########### FUNCTION for GENERATING LINE BOUNDS ####################
    
def generateBounds(list_pt, width):
    empty_list=[]
    for j in list_pt:
        a= j
        n = []
        m=[]
        p=[]
        q=[]
        r=[]
        s=[]
        for i in range(len(a)):
            if(i>0):
                if(a[i][0]==a[i-1][0]):
                    if((a[i-1][1]-a[i][1])<0):#checked
                        p =[a[i-1][0]+width,a[i-1][1]]
                        q =[a[i-1][0]-width,a[i-1][1]]
                        if(i == len(a)-1):
                                r =[a[i][0]+width,a[i][1]]
                                s =[a[i][0]-width,a[i][1]]
                        else:                            
                            try:
                                if(a[i+1][0]-a[i][0]>0):
                                    r =[a[i][0]+width,a[i][1]-width]
                                    s =[a[i][0]-width,a[i][1]+width]
                                elif(a[i+1][0]-a[i][0]<0):
                                    r =[a[i][0]-width,a[i][1]-width]
                                    s =[a[i][0]+width,a[i][1]+width]
                            except Exceptions as e:
                                None                                
                    elif((a[i-1][1]-a[i][1])>0):#checked
                        p =[a[i-1][0]+width,a[i-1][1]]
                        q =[a[i-1][0]-width,a[i-1][1]]
                        if(i == len(a)-1):
                                r =[a[i][0]+width,a[i][1]]
                                s =[a[i][0]-width,a[i][1]]
                        else:                            
                            try:
                                if(a[i+1][0]-a[i][0]>0):
                                    r =[a[i][0]+width,a[i][1]-width]
                                    s =[a[i][0]-width,a[i][1]+width]
                                elif(a[i+1][0]-a[i][0]<0):
                                    r =[a[i][0]-width,a[i][1]+width]
                                    s =[a[i][0]+width,a[i][1]-width]
                            except Exceptions as e:
                                None
                elif(a[i][1] == a[i-1][1]):#checked
                    if((a[i-1][0]-a[i][0])>0):#08 00
                        p =[a[i-1][0],a[i-1][1]-width]
                        q =[a[i-1][0],a[i-1][1]+width]
                        if(i == len(a)-1):
                                r =[a[i][0],a[i][1]-width]
                                s =[a[i][0],a[i][1]+width]
                        else:                            
                            try:
                                if(a[i+1][1]-a[i][1]>0):
                                    r =[a[i][0]-width,a[i][1]-width]
                                    s =[a[i][0]+width,a[i][1]+width]
                                elif(a[i+1][1]-a[i][1]<0):
                                    r =[a[i][0]-width,a[i][1]+width]
                                    s =[a[i][0]+width,a[i][1]-width]
                            except Exceptions as e:
                                None                                
                    elif((a[i-1][0]-a[i][0])<0):#checked
                        p =[a[i-1][0],a[i-1][1]+width]
                        q =[a[i-1][0],a[i-1][1]-width]
                        if(i == len(a)-1):
                                r =[a[i][0],a[i][1]-width]
                                s =[a[i][0],a[i][1]+width]
                        else:                            
                            try:
                                if(a[i+1][1]-a[i][1]>0):
                                    r =[a[i][0]-width,a[i][1]+width]
                                    s =[a[i][0]+width,a[i][1]-width]
                                elif(a[i+1][1]-a[i][1]<0):
                                    r =[a[i][0]+width,a[i][1]+width]
                                    s =[a[i][0]-width,a[i][1]-width]
                            except Exceptions as e:
                                None                          
                if(p not in empty_list):
                    m.append(p)
                if(r not in empty_list):
                    m.append(r)
                if(q not in empty_list):
                    m.append(q)
                if(s not in empty_list):
                    m.append(s)    
                empty_list.append(m)
    return_list = []
    for i in empty_list:
        return_list = return_list + i        
    return return_list
    
shell= filter(None, shell)
shell_pt = generateBounds(shell, 3)
temp_points = filter(None, temp_points)
barred_points = generateBounds(temp_points, width)
polygon_list = []

p_list=[]
for i in barred_points:
    a = []
    for j in barred_points:
        if(i!= [] and j!=[]):
          if(i!=j):
              a=[]
              if((i[0]==j[0]) or (i[1] == j[1])):
                  a.append(i)
                  a.append(j)
                  p_list.append(a)

for i in p_list:
    a= [i[1],i[0]]
    if(i not in polygon_list and a not in polygon_list):
        polygon_list.append(i) 
#check intersection from polygon 
			
#check intersection from polygon list
#shell_pt has the points for vertices to check with intersection list
#This function is used to generate visible vertices
def getvisibleVertices(current):
    actual_points = []
    for k in shell_pt:
        if (k!=[]):
          currentpt = Point(current[0],current[1])
          kpt = Point(k[0], k[1])
          #currentpt to kpt
          valid = 1
          for l in polygon_list:
             pt1 = Point(l[0][0], l[0][1])
             pt2 = Point(l[1][0], l[1][1])
             if(intersect(currentpt, kpt, pt1, pt2) == True):
                 valid = 0
          if(valid == 1):
                 actual_points.append(k)
    return actual_points

#barred_points contains the data about the restricted areas  
###########################################################################  
############ PHASE -2 : DEFINING NODE AND A* Algorithm ####################
###########################################################################        

class AStar:
    def distBetween(self,current,neighbor, atype):
        if(atype == "solve"):
          distance = (abs(current[0]-neighbor[0]) + abs(current[1]-neighbor[1]))
        elif(atype == "search"):
          distance = sqrt(abs(current[0]-neighbor[0])**2 + abs(current[1]-neighbor[1])**2)
        return distance

    def heuristicEstimate(self,start,goal, atype):
        if(atype== "solve"):
          hvalue = (abs(start[0]-goal[0]) + abs(start[1]-goal[1]))#*1.001
        elif(atype == "search"):
          hvalue = sqrt(abs(start[0]-goal[0])**2 + abs(start[1]-goal[1])**2)
        return hvalue

    def neighborNodes(self,current, goal, atype):
        clist = []
        test = [Point(current[0], current[1]),Point(goal[0], goal[1])]
        find_vertices = 0
        for i in polygon_list:
                pt1 = Point(i[0][0], i[0][1])
                pt2 = Point(i[1][0], i[1][1])
                if(intersect(test[0], test[1], pt1, pt2)== True):
                    find_vertices = 1
        if(find_vertices==1):
                clist = getvisibleVertices(current)
        else:
                clist = [goal]
        for i in clist:
                gc = gScore[str(current)] + self.distBetween(current,i, atype)
                gScore.update({str(i): gc})            
        return clist

    def reconstructPath(self,cameFrom,start, goal):
        try:
            global path
            path = deque()
            node = (goal)
            path.appendleft(node)
            while True:
                node = cameFrom[str(node)]
                path.appendleft(node)
                if(node == str(start)):
                    return path
        except Exception as e:
            None
    
    def getLowest(self,openSet,fScore):
        global lowest
        lowest = float("inf")
        lowestNode = None
        for node in openSet:
            if fScore[str(node)] < lowest:
                lowest = fScore[str(node)]
                lowestNode = node
        return lowestNode

    def aStar(self,start,goal, atype):
        global gScore, fScore, openSet, closedSet, current, cameFrom
        gScore =[]
        fScore = []
        cameFrom = {}
        openSet = set()
        openSet.add(str(start))
        closedSet = set()
        gScore = {}
        fScore = {}
        gScore.update({str(start): 0})
        fScore.update({str(start): 0})
        gScore[str(start)] = 0
        fScore[str(start)] = gScore[str(start)] + self.heuristicEstimate(start,goal,atype)
        while len(openSet) != 0:
            current = self.getLowest(openSet,fScore)
            current = ast.literal_eval(current)
            openSet.remove(str(current))
            closedSet.add(str(current))
            if current == goal:
                return self.reconstructPath(cameFrom,start,goal)
            for neighbor in self.neighborNodes(current,goal, atype):
                tentative_gScore = gScore[str(current)] + self.distBetween(current,neighbor, atype)
                if str(neighbor) in closedSet and tentative_gScore >= gScore[str(neighbor)]:
                    continue
                if str(neighbor) not in closedSet or tentative_gScore < gScore[str(neighbor)]:
                    cameFrom[str(neighbor)] = current
                    gScore[str(neighbor)] = tentative_gScore
                    fScore[str(neighbor)] = gScore[str(neighbor)] + self.heuristicEstimate(neighbor,goal, atype)
                    if str(neighbor) not in openSet:
                        openSet.add(str(neighbor))
        return "nothing found"

def startSearch(start, goal):
    global sparse_pt
    a=AStar()
    g =a.aStar(start,goal, "search")
    sparse_pt = []
    for i in path:
          point = list(i)
          point[0] = round(point[0],2)
          point[1] = round(point[1],2)
          if(i not in sparse_pt):
             sparse_pt.append(list(point))
  
def draw(): #This function is responsible for drawing on the star
        cell = pya.Application.instance().main_window().current_view().active_cellview().cell
        L1 = layout_waveguide_abs(cell, LayerSi, wg_points , 0.5, 5)

a=AStar()
g = a.aStar([float(starting_pt[0]*1e-3),float(starting_pt[1]*1e-3)],[float(goal_pt[0]*1e-3),float(goal_pt[1]*1e-3)],"search")
#g = a.aStar([10,200],[110,190],"search")
b = path
final =[]
final_pt = []
for i in path:
  point = list(i)
  point[0] = round(point[0],2)
  point[1] = round(point[1],2)
  if(i not in final_pt):
    final_pt.append(list(point))
final_pt.reverse()
print ("here", final_pt)
for i in final_pt:
	spt = Point(starting_pt[0]*1e-3,starting_pt[1]*1e-3)
	cpt = Point(i[0], i[1])
	yes = 0
	for j in polygon_list:
		pt1 = Point(j[0][0], j[0][1])
		pt2 = Point(j[1][0], j[1][1])
		if(intersect(spt,cpt, pt1,pt2)):
			yes = 1
	if(yes == 1):
		final.append(i)
	else:
		final.append(i)
		final.append([starting_pt[0]*1e-3,starting_pt[1]*1e-3])
		break
wg_points = final

#final filter for unoptimal points
optimised_pts = []
wg_copy = []
for i in wg_points:
  wg_copy.append(i)
wg_copy.reverse()

links = []

def proof(ind1, ind2):
  global links
  intersection = 0
  i = wg_copy[ind1]
  j = wg_points[ind2]
  firstpt = Point(i[0], i[1])
  secondpt = Point(j[0], j[1])
  for k in polygon_list:
    pt1 = Point(k[0][0], k[0][1])
    pt2 = Point(k[1][0], k[1][1])
    if(intersect(firstpt, secondpt, pt1, pt2)==True):
      intersection = 1
  if(intersection == 0):
    links.append([i, j])
    if(i == wg_points[0] or j == wg_points[0]):
      return
    if(ind1+1 <= len(wg_copy)-1):
      proof(ind1+1, ind2)
  else:
    proof(ind1, ind2-1)
proof(0, -1)

start = wg_points[-1]
end = wg_points[0]

def finalfilter(pt):
  first = pt
  second = []
  if(pt == start):
    return
  else:
    for i in links:
      if(i[0] == pt):
        second = i[1]
        if(first not in optimised_pts):
          optimised_pts.append(first)
        if(second not in optimised_pts):
          optimised_pts.append(second)
        finalfilter(second)

finalfilter(end)
wg_points = optimised_pts

print (wg_points)
draw()
 </text>
</klayout-macro>
