<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>SiEPIC: 2-Waveguide to Path</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut>Shift+W</shortcut>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>siepic_menu.end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Python script
# SiEPIC_EBeam_Waveguide_to_Path

"""
This file is part of the SiEPIC_EBeam_PDK
by Lukas Chrostowski (c) 2015

This Python file implements returns a ROUND_PATH waveguide back to a path 


Version history:

Lukas Chrostowski           2015/11/15
 - Initial version
 - Selected ROUND_PATH waveguides on the silicon layer are converted to paths.

Lukas Chrostowski           2015/11/16
 - Fix bug to include waveguide_to_path transformation of the ROUND_PATH PCell

Lukas Chrostowski           2015/11/18
 - If the GUIDING_SHAPE is selected, find out the ROUND_PATH PCell it belongs to.
   user can either select the PCell or it's ROUND_PATH.

Lukas Chrostowski           2015/11/18
 - removed need for numpy.array
 
"""



import pya


# Configure variables to draw structures in the presently selected cell:
lv = pya.Application.instance().main_window().current_view()
if lv == None:
  raise Exception("No view selected")
# Find the currently selected layout.
ly = pya.Application.instance().main_window().current_view().active_cellview().layout() 
if ly == None:
  raise Exception("No layout")
# find the currently selected cell:
cell = pya.Application.instance().main_window().current_view().active_cellview().cell
if cell == None:
  raise Exception("No cell")
# fetch the database parameters
dbu = ly.dbu

# Define layers based on PDK_functions:
LayerSiN = ly.layer(LayerSi)
LayerPinRecN = ly.layer(LayerPinRec)
LayerDevRecN = ly.layer(LayerDevRec)
LayerFbrTgtN = ly.layer(LayerFbrTgt)
LayerErrorN = ly.layer(LayerError)


# Record a transaction, to enable "undo"
lv.transaction("Waveguide to Path")

print ("------------------ Waveguide to Path --------------")

# record objects to delete:
to_delete = []

# new objects will become selected
new_selection = []

# Find the selected objects
object_selection = lv.object_selection   # returns ObjectInstPath[].

is_waveguide = False

for o in object_selection:
  # Find the selected waveguides

  if o.is_cell_inst():
    print ("Selected object is a cell.")
    oinst = o.inst()
    if oinst.is_pcell():
      c = oinst.cell
      if c.basic_name() == 'ROUND_PATH' and c.pcell_parameters_by_name()['layer'] == LayerSi:
        print ("ROUND_PATH on LayerSi.")
        is_waveguide = True
        trans = oinst.trans

  elif o.shape:
    print ("Selected object is a shape.")
    c = o.shape.cell
    if c.basic_name() == "ROUND_PATH" and c.is_pcell_variant() and c.pcell_parameters_by_name()['layer'] == LayerSi:
      # we have a waveguide GUIDING_LAYER selected
      print ("Selected object is a GUIDING_LAYER in ROUND_PATH on LayerSi.")
      trans = o.source_trans().s_trans()
      o_instpathlen = o.path_length()
      oinst = o.path_nth(o_instpathlen-1).inst()
      is_waveguide = True

  # We now have a waveguide ROUND_PATH PCell, with variables: o (ObjectInstPath), oinst (Instance), c (Cell)
  if is_waveguide == True:
    path_obj = c.pcell_parameters_by_name()['path']
    print ( path_obj ) 
    wg_width = path_obj.width/dbu
    # convert wg_path (in microns) to database numbers
    wg_path = points_to_path(points_mult(path_to_Dpoints(path_obj), 1/dbu), wg_width)
    # get waveguide transformation
    wg_path_trans = wg_path.transformed(trans)

    print ( "wg_path_trans: %s" % wg_path_trans ) 
    new_wg = cell.shapes(LayerSiN).insert(wg_path_trans)

    # Leave the newly created waveguide selected, to make it obvious to the user.
    # http://klayout.de/forum/comments.php?DiscussionID=747
    new_selectionN = len(new_selection)
    new_selection.append( pya.ObjectInstPath() )
    new_selection[new_selectionN].layer = LayerSiN
    new_selection[new_selectionN].shape = new_wg
    new_selection[new_selectionN].top = o.top
    new_selection[new_selectionN].cv_index = o.cv_index
   
#    to_delete.append(oinst.cell) # deleting this removes the cell entirely (which may be used elsewhere!)
    to_delete.append(oinst) # ldelete the instance; leaves behind the cell if it's not used
        
for t in to_delete:
  t.delete()

# Clear the layout view selection, since we deleted some objects (but others may still be selected):
lv.clear_object_selection()

# Select the newly added objects
lv.object_selection = new_selection
     
# Record a transaction, to enable "undo"
lv.commit()

if not(is_waveguide):
  v = pya.MessageBox.warning("No waveguide selected", "No waveguide selected.\nPlease select a ROUND_PATH waveguide. \nIt will get converted to a path.", pya.MessageBox.Ok)
</text>
</klayout-macro>
