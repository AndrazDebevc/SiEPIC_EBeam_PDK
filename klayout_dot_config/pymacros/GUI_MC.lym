<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Python script
"""
This file is part of the SiEPIC_EBeam_PDK
by Jaspreet Jhoja (c) 2016

This Python file implements a Graphical User Interface(GUI) for Monte-Carlo Simulations.

Version history:

Jaspreet Jhoja 2016/03/13 
 - Verifies the field input and highlight the unacceptable input.
 - Does not require tk8.6 and tcl8.6

Jaspreet Jhoja 2016/03/11 
 - Empty GUI with no functionality.
 - Requires tk8.6 and tcl 8.6 to work
 """
from pya import *
import pya

datalist = [] # list to store data from all fields
objlist = []#list of data objects
clear = []#12 clears should be there

wdg = QDialog(pya.Application.instance().main_window())
wdg.setAttribute(pya.Qt.WA_DeleteOnClose)
wdg.setWindowTitle("Monte-Carlo Simulation")
titlefont = QFont("Courier", 9, QFont.Bold, False)
hbox = QVBoxLayout(wdg)
wdg.setFixedSize(650, 300)

mapper = QSignalMapper()


def action(obj):
  try:
    float(obj.text)
    obj.setStyleSheet("border: 2px solid green;")

  except Exception:
    obj.setStyleSheet("border: 2px solid red;")
    
#validate text input
def errorcheck(self):
  for each in objlist:
    if(each.text == ''):
     None
    else:
      action(each)

#Left Frame top section
lframe1 = QFrame()
lframe1.setFrameShape(QFrame.StyledPanel)
lf1title = QLabel('Within Wafer thickness variations')
lf1title.setFont(titlefont)
lf1label1 = QLabel('Sigma RMS for width (nm): ')
lf1label2 = QLabel('Sigma RMS for thickness (nm): ')
lf1label3 = QLabel('Correlation length (um): ')
lf1text1 = QLineEdit()
lf1text1.setAccessibleName('lf1text1')
lf1text1.textChanged(errorcheck)
lf1text2 = QLineEdit()
lf1text2.setAccessibleName('lf1text2')
lf1text2.textChanged(errorcheck)
lf1text3 = QLineEdit()
lf1text3.setAccessibleName('lf1text3')
lf1text3.textChanged(errorcheck)
lf1form = QGridLayout()
lf1form.addWidget(lf1title,0,0,2,0)
lf1form.addWidget(lf1label1, 2,0)
lf1form.addWidget(lf1text1, 2,1)
lf1form.addWidget(lf1label2, 3,0)
lf1form.addWidget(lf1text2, 3,1)
lf1form.addWidget(lf1label3, 4,0)
lf1form.addWidget(lf1text3, 4,1)
lframe1.setLayout(lf1form)

#Left Frame bottom section
lframe2 = QFrame()
lframe2.setFrameShape(QFrame.StyledPanel)
lf2title = QLabel('Within Die variations')
lf2title.setFont(titlefont)
lf2label1 = QLabel('Sigma RMS for width (nm): ')
lf2label2 = QLabel('Sigma RMS for thickness (nm): ')
lf2label3 = QLabel('Correlation length (um): ')
lf2text1 = QLineEdit()
lf2text1.setAccessibleName('lf2text1')
lf2text1.textChanged(errorcheck)
lf2text2 = QLineEdit()
lf2text2.setAccessibleName('lf2text2')
lf2text2.textChanged(errorcheck)
lf2text3 = QLineEdit()
lf2text3.setAccessibleName('lf2text3')
lf2text3.textChanged(errorcheck)
lf2form = QGridLayout()
lf2form.addWidget(lf2title,0,0,2,0)
lf2form.addWidget(lf2label1, 2,0)
lf2form.addWidget(lf2text1, 2,1)
lf2form.addWidget(lf2label2, 3,0)
lf2form.addWidget(lf2text2, 3,1)
lf2form.addWidget(lf2label3, 4,0)
lf2form.addWidget(lf2text3, 4,1)
lframe2.setLayout(lf2form)


#Right Frame -section1
rframe1 = QFrame()
rframe1.setFrameShape(QFrame.StyledPanel)
rf1title = QLabel('Wafer mean')
rf1title.setFont(titlefont)
rf1label1 = QLabel('Sigma RMS for width (nm): ')
rf1label2 = QLabel('Sigma RMS for thickness (nm): ')
rf1text1 = QLineEdit()
rf1text1.setAccessibleName('rf1text1')
rf1text1.textChanged(errorcheck)
rf1text2 = QLineEdit()
rf1text2.setAccessibleName('rf1text2')
rf1text2.textChanged(errorcheck)
rf1form = QGridLayout()
rf1form.addWidget(rf1title,0,0,2,0)
rf1form.addWidget(rf1label1, 2,0)
rf1form.addWidget(rf1text1, 2,1)
rf1form.addWidget(rf1label2, 3,0)
rf1form.addWidget(rf1text2, 3,1)
rframe1.setLayout(rf1form)

#Right Frame = Section2
rframe2 = QFrame()
rframe2.setFrameShape(QFrame.StyledPanel)
rf2title = QLabel('Wafer size')
rf2title.setFont(titlefont)
rf2label1 = QLabel('Wafer Length X (mm):             ')
rf2label2 = QLabel('Wafer Length Y (mm):             ')
rf2text1 = QLineEdit()
rf2text1.setAccessibleName('rf2text1')
rf2text1.textChanged(errorcheck)
rf2text2 = QLineEdit()
rf2text2.setAccessibleName('rf2text2')
rf2text2.textChanged(errorcheck)
rf2form = QGridLayout()
rf2form.addWidget(rf2title,0,0,2,0)
rf2form.addWidget(rf2label1, 2,0)
rf2form.addWidget(rf2text1, 2,1)
rf2form.addWidget(rf2label2, 3,0)
rf2form.addWidget(rf2text2, 3,1)
rframe2.setLayout(rf2form)


#Right Frame- Section3
rframe3 = QFrame()
rframe3.setFrameShape(QFrame.StyledPanel)
rf3title = QLabel('Die size')
rf3title.setFont(titlefont)
rf3label1 = QLabel('Die Length X (mm):                 ')
rf3label2 = QLabel('Die Length Y (mm):                 ')
rf3text1 = QLineEdit()
rf3text1.setAccessibleName('rf3text1')
rf3text1.textChanged(errorcheck)
rf3text2 = QLineEdit()
rf3text2.setAccessibleName('rf3text2')
rf3text2.textChanged(errorcheck)

rf3form = QGridLayout()
rf3form.addWidget(rf3title,0,0,2,0)
rf3form.addWidget(rf3label1, 2,0)
rf3form.addWidget(rf3text1, 2,1)
rf3form.addWidget(rf3label2, 3,0)
rf3form.addWidget(rf3text2, 3,1)
rframe3.setLayout(rf3form)

def verifyfields():
  if(lf1text1.text!='' and lf1text2.text!='' and lf1text3.text!='' and lf2text1.text!='' and lf2text2.text !='' and lf2text3.text !=''
  and rf1text1.text!='' and rf1text2.text!='' and rf2text1 !='' and rf2text2 !='' and rf3text1 !='' and rf3text2 !=''):
    return True
  else:
    return False
  
def button(self):
  global datalist
  datalist = []
  for each in objlist:
    datalist.append(each.text)
  print(datalist)
  
ok = QPushButton("run Monte Carlo Simulation", rframe3)
ok.clicked(button)
#Left Vertical splitter
leftsplitter = QSplitter(Qt.Vertical)
leftsplitter.addWidget(lframe1)
leftsplitter.addWidget(lframe2)
leftsplitter.addWidget(ok)
leftsplitter.setSizes([400,400,10])

#Right Vertical Splitter
rightsplitter = QSplitter(Qt.Vertical)
rightsplitter.addWidget(rframe1)
rightsplitter.addWidget(rframe2)
rightsplitter.addWidget(rframe3)
rightsplitter.setSizes([400,400, 400])

#Main Window Splitter
splitter1 = QSplitter(Qt.Horizontal)
textedit = QTextEdit()
splitter1.addWidget(leftsplitter)
splitter1.addWidget(rightsplitter)
splitter1.setSizes([400,400])
hbox.addWidget(splitter1)

objlist.append(lf1text1)
objlist.append(lf1text2)
objlist.append(lf1text3)
objlist.append(lf2text1)
objlist.append(lf2text2)
objlist.append(lf2text3)
objlist.append(rf1text1)
objlist.append(rf1text2)
objlist.append(rf2text1)
objlist.append(rf2text2)
objlist.append(rf3text1)
objlist.append(rf3text2)

wdg.show()

</text>
</klayout-macro>
